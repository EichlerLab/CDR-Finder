from os.path import join


configfile: "config.yaml"


include: "rules/utils.smk"


containerized: "docker://logsdonlab/cdr-finder:latest"


MANIFEST = config["samples"]
WINDOW = config["window_size"]
ALR_THRESHOLD = config.get("alr_threshold", 100000)
BP_MERGE = config.get("bp_merge", 1)
BP_EDGE = config.get("bp_edge", 500_000)
BP_ALR_MERGE = config.get("bp_alr_merge", 1000)
HEIGHT_THRESHOLD = config.get("height_perc_valley_threshold", 0.5)
PROM_THRESHOLD = config.get("prom_perc_valley_threshold", 0.5)
OUTPUT_DIR = config.get("output_dir", "results")
LOG_DIR = config.get("log_dir", "logs")
BMK_DIR = config.get("benchmark_dir", "benchmarks")


wildcard_constraints:
    sample="|".join(MANIFEST.keys()),


###
# Subset fasta: Extracts subsequence from target bed
###


rule subset_fasta:
    input:
        fasta=lambda wc: MANIFEST[wc.sample]["fasta"],
        bed=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        rm_fasta=join(OUTPUT_DIR, "fasta", "{sample}_subset.fasta"),
    log:
        join(LOG_DIR, "subset_fasta_{sample}.log"),
    resources:
        mem=8,
        hrs=1,
    threads: 1
    conda:
        "envs/tools.yaml"
    shell:
        """
        bedtools getfasta -fi {input.fasta} -bed {input.bed} > {output.rm_fasta} 2> {log}
        """


###
# Get methylation information.
###


rule get_methylation_bed:
    input:
        ref=lambda wc: MANIFEST[wc.sample]["fasta"],
        bam=lambda wc: MANIFEST[wc.sample]["bam"],
        region=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        methyl_bed=join(OUTPUT_DIR, "bed", "{sample}_methyl.bed"),
    log:
        join(LOG_DIR, "get_methylation_bed_{sample}.log"),
    benchmark:
        join(BMK_DIR, "get_methylation_bed_{sample}.tsv")
    params:
        preset="traditional",
        ref=lambda wc, input: f"<(zcat {input.ref})"
        if str(input.ref).endswith(".gz")
        else input.ref,
    threads: 4
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/tools.yaml"
    shell:
        """
        samtools index {input.bam} 2> {log}
        modkit pileup {input.bam} {output.methyl_bed} \
        --include-bed {input.region} \
        --threads {threads} \
        --ref {params.ref} \
        --preset {params.preset} 2>> {log}
        """


###
# run_rm: Runs repeatmasker on the extracted subsequence fasta from rule subset_fasta
###


rule run_rm:
    input:
        fasta=rules.subset_fasta.output.rm_fasta,
    output:
        rm_out=join(
            OUTPUT_DIR,
            "rm",
            "{sample}_subset.fasta.out",
        ),
    log:
        join(LOG_DIR, "run_rm_{sample}.log"),
    benchmark:
        join(BMK_DIR, "run_rm_{sample}.tsv")
    params:
        engine="rmblast",
        species="human",
        output_dir=lambda wc, output: os.path.dirname(str(output)),
    resources:
        mem=8,
        hrs=12,
    threads: 12
    conda:
        "envs/tools.yaml"
    shell:
        """
        RepeatMasker \
        -engine {params.engine} \
        -species {params.species} \
        -dir {params.output_dir} \
        -qq \
        -pa {threads} \
        {input.fasta} > {log}
        """


###
# Calculates mean frequency in windows/bins of the methylation tsv over the target region
###


rule calc_windows:
    input:
        script=workflow.source_path("scripts/calculate_windows.py"),
        methylation_tsv=rules.get_methylation_bed.output,
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
    output:
        binned_freq=join(OUTPUT_DIR, "bed", "{sample}_binned_freq.bed"),
    log:
        join(LOG_DIR, "calc_windows_{sample}.log"),
    benchmark:
        join(BMK_DIR, "calc_windows_{sample}.tsv")
    threads: 1
    resources:
        mem=8,
        hrs=1,
    threads: 1
    conda:
        "envs/python.yaml"
    params:
        window_size=WINDOW,
    shell:
        """
        python {input.script} \
        --target_bed {input.target_bed} \
        --methylation_tsv {input.methylation_tsv} \
        --window_size {params.window_size} \
        -p {threads} > {output} 2> {log}
        """


###
# Format RM: Converts Repeatmasker output to bedfile and extracts only ALR annotations
###


rule format_filter_RM:
    input:
        rm_out=rules.run_rm.output.rm_out,
    output:
        rm_bed=join(OUTPUT_DIR, "bed", "{sample}_rm.bed"),
        rm_alr_bed=join(OUTPUT_DIR, "bed", "{sample}_rm_ALR.bed"),
    log:
        join(LOG_DIR, "format_filter_RM_{sample}.log"),
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/tools.yaml"
    threads: 1
    shell:
        """
        awk -v OFS="\\t" 'NR > 3 {{
            split($5, chr_names, ":")
            print chr_names[1], $6, $7, $10, $11, $9 > "{output.rm_bed}"
            if ( $10 ~ "ALR" ) {{
                print chr_names[1], $6, $7, $10, $9
            }}
        }}' {input.rm_out} > {output.rm_alr_bed} 2> {log}
        """


use rule add_target_bed_coords as add_target_bed_coords_rm_alr with:
    input:
        # 3-cols
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        # 5-cols
        bed=rules.format_filter_RM.output.rm_alr_bed,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_rm_ALR_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_rm_alr_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$6",
        col_other=",$4,$5",


use rule add_target_bed_coords as add_target_bed_coords_rm with:
    input:
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        bed=rules.format_filter_RM.output.rm_bed,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_rm_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_rm_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$7",
        col_other=",$4,$5,$6",


use rule add_target_bed_coords as add_target_bed_coords_windows with:
    input:
        target_bed=lambda wc: MANIFEST[wc.sample]["regions"],
        bed=rules.calc_windows.output,
    output:
        bed=join(OUTPUT_DIR, "bed", "{sample}_binned_freq_adj.bed"),
    log:
        join(LOG_DIR, "add_target_bed_coords_windows_{sample}.log"),
    params:
        col_st="$2",
        col_end="$3",
        col_add="$6",
        col_other=",$4,$5",


###
# Intersect RM: Merges repeatmasker bed file with 500bp slop, and only keeps those above the ALR Threshold
#               Intersects merged ALR bed file with binned methylation frequency bedfile
###


rule intersect_RM:
    input:
        repeat_masker=rules.add_target_bed_coords_rm_alr.output,
        binned_freq=rules.add_target_bed_coords_windows.output,
    output:
        intersect_bed=join(OUTPUT_DIR, "bed", "{sample}_intersect.bed"),
        merged=join(OUTPUT_DIR, "bed", "{sample}_rm_merged.bed"),
    log:
        join(LOG_DIR, "intersect_RM_{sample}.log"),
    benchmark:
        join(BMK_DIR, "intersect_RM_{sample}.tsv")
    resources:
        mem=8,
        hrs=1,
    params:
        alr_threshold=ALR_THRESHOLD,
        bp_alr_merge=BP_ALR_MERGE,
    threads: 1
    conda:
        "envs/tools.yaml"
    shell:
        """
        {{ bedtools merge -i {input.repeat_masker} -d {params.bp_alr_merge} | \
        awk '{{if ($3-$2 > {params.alr_threshold}) print}}' ;}} > {output.merged} 2> {log}
        bedtools intersect -a {input.binned_freq} -b {output.merged} -f 1 -wa -u > {output.intersect_bed} 2>> {log}
        """


rule call_cdrs:
    input:
        script=workflow.source_path("scripts/cdr_finder.py"),
        intersect_bed=rules.intersect_RM.output.intersect_bed,
    output:
        cdrs=join(OUTPUT_DIR, "bed", "{sample}_CDR.bed"),
    log:
        join(LOG_DIR, "call_cdrs_{sample}.log"),
    benchmark:
        join(BMK_DIR, "call_cdrs_{sample}.tsv")
    resources:
        mem=8,
        hrs=1,
    params:
        bp_merge=f"--bp_merge {BP_MERGE}" if BP_MERGE else "",
        bp_edge=BP_EDGE,
        thr_prom_perc_valley=(
            f"--thr_prom_perc_valley {PROM_THRESHOLD}" if PROM_THRESHOLD else ""
        ),
        thr_height_perc_valley=HEIGHT_THRESHOLD,
    conda:
        "envs/python.yaml"
    threads: 1
    shell:
        """
        python {input.script} \
        -i {input.intersect_bed} \
        --thr_height_perc_valley {params.thr_height_perc_valley} \
        --bp_edge {params.bp_edge} \
        {params.bp_merge} {params.thr_prom_perc_valley} > {output} 2> {log}
        """


rule plot_cdr:
    input:
        script=workflow.source_path("scripts/plot_cdr.R"),
        binned_freq_bed=rules.add_target_bed_coords_windows.output,
        cdr_bed=rules.call_cdrs.output,
        rm_bed=rules.add_target_bed_coords_rm.output,
    output:
        directory(join(OUTPUT_DIR, "plot", "{sample}")),
    log:
        join(LOG_DIR, "plot_cdr_{sample}.log"),
    benchmark:
        join(BMK_DIR, "plot_cdr_{sample}.tsv")
    resources:
        mem=8,
        hrs=1,
    conda:
        "envs/r.yaml"
    shell:
        """
        Rscript {input.script} \
        --input_methyl {input.binned_freq_bed} \
        --input_rm {input.rm_bed} \
        --input_cdr {input.cdr_bed} \
        --output_dir {output} \
        --add_hbar 2> {log}
        """


rule all:
    input:
        expand(rules.call_cdrs.output, sample=MANIFEST.keys()),
        expand(rules.plot_cdr.output, sample=MANIFEST.keys()),
    default_target: True
